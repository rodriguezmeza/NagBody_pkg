CUTE - Correlation Utilities and Two-point Estimates


1 Introduction.

CUTE (and its GPU implementation CU_CUTE) provide a set of tools to
calculate 2-point correlation functions of cosmological point distributions.
The functionality of both programs is very similar, so we will discuss CUTE
first and the differences with CU_CUTE will be explained afterwards (section
9).

For a description of the functionality of CUTE_box, the implementation of
CUTE for periodic-box catalogs, see the README file contained in CUTE_box's
root directory.


2 Dependencies.

Two things are necessary to compile and run CUTE: the gcc C compiler and the
GSL libraries. Although CUTE is parallelized for shared and distributed memory
machines with OpenMP and MPI respectively, systems lacking these will be able
to run in sequential mode anyway. If MPI paralelization is desired, an mpi
C compiler (e.g. mpicc) is also necessary.

Once the input files are provided and the compile-time options set,
compilation should be straightforward by just typing

  $ make CUTE

This will generate the executable CUTE which can then be run by typing

  $ ./CUTE <param_file>

Where <param_file> is the path to the parameter file (see section 3.1).


3 Input files.

Several files are needed in any CUTE run:
3.1 The parameter file:
   Part of the behavior of CUTE is governed through the parameter file. This
   file must contain the following fields:
    * data_filename= FILENAME
              See section 3.2 below.
    * random_filename= FILENAME
	      Please provide the catalog yourself using the same format as
	      for the data.
    * data_filename_2= FILENAME
              This, as well as random_filename_2 are only needed if
	      cross-correlating two different datasets. Omit these parameters
	      if you only want to compute the auto-correlation.
    * random_filename_2= FILENAME
              This, as well as data_filename_2 are only needed if
	      cross-correlating two different datasets. Omit these parameters
	      if you only want to compute the auto-correlation.
    * RR_filename= FILENAME
              Path to a file containing a previous computation of the same
	      correlation function you want to calculate. The R1R2 histogram
	      will be read from this file, and no time will be spent computing
	      it from the random catalogs. Omit this parameter if you want 
	      to compute R1R2 from the randoms. IMPORTANT: if you make use of
	      this parameter, you should make sure that the file you pass was
	      created by CUTE for the same pair of random catalogs, binning
	      parameters and correlation function type.
    * input_format= INT
              Format of the data and random catalogs (both should use the
	      same format). Three formats (0, 1 and 2) are currently supported
	      (see section 3.2 for details).
    * output_filename= FILENAME
              See section 5 below.
    * omega_M= DOUBLE
              Matter parameter (cosmological parameters are needed for the
              distance-redshift relation, which is only necessary for the
	      monopole and 3-D correlation functions).
    * omega_L= DOUBLE
              Dark energy parameter
    * w= DOUBLE
              Dark energy equation of state.
    * corr_type= STRING
              Type of correlation function to be computed. Five options are
              available:
 		      "radial"         -> Radial correlation function
 		      "angular"        -> Angular correlation function
                      "monopole"       -> Monopole
                      "3D_ps"          -> 3D correlation binning in sigma-pi
                      "3D_rm".         -> 3D correlation binning in r-mu
                      "full".          -> Angular correlation function as a
                                          function of redshift and radial separation
              See section 6 below for more information on the different types.
    * log_bin= INT
              Set to 1 to use logarithmic binning. Only relevant for the angular
              2PCF, "full" correlation, monopole and 3D 2PCF (r-mu). 0 otherwise.
    * dim1_min_logbin= FLOAT
              Minimum scale to which the 2PCF will be computed. Only relevant if
	      using logarithmic binning (log_bin= 1 above).
    * dim1_max= FLOAT
              Maximum scale to which the 2PCF will be computed in the first
	      dimension. This corresponds to:
              - The maximum angular separation in the case of the angular 2PCF,
                angular cross-correlations and the "full" correlation function.
	      - The maximum value of r for the monopole and 3D correlation function
                (in r-mu).
              - The maximum redshift separation in the case of the radial
	        correlation function.
	      - The maximum transverse separation (sigma) in the case of the 3D correlation
	        function (in pi-sigma).
    * dim1_nbin= INT
              Number of bins in the first dimension
    * dim2_max= FLOAT
              Maximum scale to which the 2PCF will be computed in the second
	      dimension. This corresponds to:
	      - The maximum radial separation (pi) in the case of the 3D correlation
	        function (in pi-sigma). Note that in the case of r-mu binning, mu always
		goes from 0 to 1.
              - The maximum redshift separation in the case of the "full"
	        correlation function.
    * dim2_nbin= INT
              Number of bins in the second dimension
    * dim3_min= FLOAT
              Minimum scale to which the 2PCF will be computed in the third
	      dimension. This corresponds to:
	      - The minimum mean redshift in the case of the "full " correlation function.
	      - The minimum redshift in the case of the angular cross-correlations.
    * dim3_max= FLOAT
              Maximum scale to which the 2PCF will be computed in the third
	      dimension. This corresponds to:
	      - The maximum mean redshift in the case of the "full " correlation function.
	      - The maximum redshift in the case of the angular cross-correlations.
    * dim3_nbin= INT
              Number of bins in the third dimension
    * radial_aperture= FLOAT
              Maximum angular separation (in deg) between pairs of galaxies
	      to calculate the radial correlation function. See section 6.
    * use_pm= INT
              If set to 1 the angular correlation function and angular
              cross-correlations will be calculated by pixelizing the catalog.
              Set it to 0 otherwise (brute-force). See section 8 for more information
	      on the pixelization.
    * n_pix_sph= INT
              The sphere will be divided in 2 x n_pix_sph^2 pixels. Only
	      relevant for the angular correlation function with pixelization.
              See section 8 below.
    
    Any blank line or any line starting with the character '#' in the
    parameter file will be ignored. An example of this file is provided with
    the test suite.

3.2 The data catalog:
    CUTE assumes catalogs are ASCII files with 3 or 4 columns:
                 x0         x1        x2        x3
    The meaning of the first three columns will depend on the value assigned
    to the parameter "input_format":
       input_format= 0 : x0 = redshift, x1 = cos(theta), x2 = phi
       input_format= 1 : x0 = redshift, x1 = DEC,        x2 = RA
       input_format= 2 : x0 = RA,       x1 = DEC,        x2 = redshift
    Here, cos(theta) and phi are the spherical coordinates corresponding to
    each object (with phi in radians). These spherical coordinates are
    related to equatorial coordinates by RA=phi and theta=90-DEC. For formats
    1 and 2, RA and DEC should be given in deg. The fourth column x3 is only 
    necessary if CUTE is compiled using the -D_WITH_WEIGHTS flag in the
    Makefile. In this case the fourth column must be a floating point number
    containing the corresponding galaxy's weight.

    This file may contain other columns, which will be ignored, but the
    first 3 or 4 must correspond to the ones above. In particular, note
    that one may have a fourth column containing the galaxy weights that
    will be ignored if CUTE is compiled ***without*** -D_WITH_WEIGHTS.
    If other input formats are necessary, the user may modify the function
    read_line in src/io.c, in order to accommodate it to their needs.

3.3 The random catalog:
    The random catalog(s) should be provided using the same format used for
    the data. The option of generating its own random catalogs is no longer
    supported by CUTE.

3.4 Note on the 2PCF estimator:
    CUTE now only supports the Landy & Szalay estimator, which in the case
    of cross correlations reads:
       w = (D1D2 - D1R2 - R1D2 - R1R2)/R1R2,
    where A1B2 is the normalized histogram of pair number counts between
    datasets A1 and B2, where A and B can be either data (D) or random (R).

4 The compile-time options:

For performance reasons some run parameters must be chosen through
compile-time options defined at the beginning of the Makefile. These are:

   >Behavior options: add any of these to the variable DEFINEOPTIONS.
   * -D_WITH_WEIGHTS -> read and use galaxy weights both for the data and
                        random catalogs. The use of weights is only
			implemented in the OpenMP version of CUTE.
   * -D_VERBOSE      -> extra info will be output.
   * -D_DEBUG        -> creates some debugging files.
   * -D_TRUE_ACOS    -> the true arccosine will be computed for the
                        angular correlation function (see below for more
		        details).
   * -D_HAVE_MPI     -> include this flag if you want to add MPI parallelization.
                        This is fully compatible with OpenMP. Note, however,
			that all MPI tasks will store a copy of the data and
			random catalogs, and so you may run out of memory by
			spawning too many tasks. An ideal run will create one
			single MPI task per node, and let OpenMP do the job of
			parallelizing the computation using all cores in that
			node.
   * -D_HAVE_OMP     -> remove this flag if you don't have the OpenMP headers
                        installed.
   * -D_LOGBIN       -> logarithmic binning will be used. Only relevant for CU_CUTE,
                        for angular, monopole and 3D (in r-mu) 2PCFs. The
                        resolution is set by the Makefile variable N_LOGINT,
 			which determines the number of bins per decade. Note
		        that performance will be poorer when using logarithmic
   			binning.

   >The Gnu Scientific Library (GSL) must be installed in order to be able
    to compile CUTE. Set the Makefile variables GSL_INC and GSL_LIB to the
    paths to the GSL headers and libraries.

   >CUDA options: see section 9 below.


5 The output file.

The output file contains 6 columns for the radial, angular and monopole
correlation functions with
              x   xi(x)   D1D2(x)   D1R2(x)   R1D2(x)    R1R2(x) 
where x is Dz, theta or r. Note that, in the case of auto-correlations
D1D2=DD, D1R2=R1D2=DR, R1R2=RR.

For the 3-D correlation functions the output file has 7 columns with
   x1   x2   xi(x1,x2)   D1D2(x1,x2)   D1R2(x1,x2)   R1D2(x1,x2)   R1R2(x1,x2)
where (x1,x2) is either (pi,sigma) or (mu,r).

For the "full" correlation function the output file has 8 columns with
   x1  x2  x3  xi(x1,x2,x3)  D1D2(x1,x2,x3)  D1R2(x1,x2,x3)  R1D2(x1,x2,x3)  R1R2(x1,x2,x3)
where (x1,x2,x3) is (z_mean,Dz,theta). Here (z_mean,Dz) are the mean redshift and
redshift separation.

For the monopole and 3-D 2PCFs distances are given in units of Mpc/h. Angles
should be provided and are returned in degrees.


6 The correlations.

CUTE supports the calculation of 7 different types of 2-point correlation
functions. In all cases the process is always very similar:
  - Take a pair of objects in the data catalog(s).
  - Calculate the distance between both objects.
  - Bin the pair in a histogram according to the calculated distance.
  - Repeat for all pairs in the catalog to obtain the histogram D1D2.
  - Do the same for a (pair of) random catalog(s) to obtain R1R2.
  - Do the same but with each pair composed of a data object and a random
    object to obtain D1R2 and R1D2.
  - Use D1D2, D1R2, R1D2 and R1R2 to estimate the correlation function
    through the Landy & Szalay estimator.
Each type of correlation function has some subtleties regarding this
calculation, which we detail below.

 * The angular correlation function
   To calculate the angular correlation function, object positions are
   normalized (i.e. projected on the sphere). Then the cosine of the angle
   separating them is calculated through the dot product of their position
   vectors. The separation angle is calculated then by taking the arccosine
   of this dot product. Taking the arccosine is computationally very slow
   and by default the code uses the following approximation:
       arccos(1-x)~sqrt(2*x+(x^2)/3+4*(x^3)/45)
   which is a good to 0.01% for angles below 40 deg and speeds up the
   calculation by a factor 2. This can be overriden by defining the
   compile-time flag -D_TRUE_ACOS, in which case the C library arccosine
   function acos will be used.

   To speed up the calculation, avoiding unnecessary correlations, the 
   whole sphere is divided into cubes in spherical coordinates (pixels).
   These pixels are used to define sub-regions of the sphere which can
   be used for fast neighbor-searching. This is described in more
   detail in the code's preprint (arXiv:1210.1833). This technique, which
   was implemented in version 1.0, is also used to search for aligned
   pairs in the calculation of the radial correlation function (see below).

   CUTE also has the option of calculating the angular correlation function
   by pixelizing the catalog (i.e., interpolating the objects to a grid and
   then correlating the pixels instead of the objects). This option is much
   faster when your catalog is large, but of course will only yield reliable
   results down to the pixel angular resolution. This option is selected by
   setting the use_pm variable in the options file to 1.

 * The radial correlation function
   A detailed description of what we call the radial correlation function
   here is given in arXiv:1210.6446. This is the fastest but most involved
   correlation. First, the angular separation between a given pair of 
   galaxies must be calculated. If this angle is smaller than the maximum
   allowed radial aperture (given by the parameter radial_aperture in the
   parameter file), the galaxies are considered collinear, and are correlated
   according to their separation in redshift Dz.

 * The monopole correlation function
   In this case object pairs are binned simply according to the
   three-dimensional distance between them. A strategy similar to the one used
   for the angular correlation function is used in this case (as well as in the
   next two). First the catalog is placed inside a box, which will not
   necessarily be cubic. This box is then divided into cubic cells, which are
   used for neighbor-searching, saving up unnecessary correlations. This
   feature is new from version 1.0.

 * The 3-D correlation function (binning in sigma-pi).
   For each pair of objects their relative separation vector (x_r) and their
   center of mass (x_CM) are calculated. Then the radial and transverse
   separations are computed as
            pi    = |x_r.x_CM|/|x_CM|
            sigma = sqrt(|x_r|^2-pi^2)
   Pairs are binned in a two-dimensional histogram by these quantities.

 * The 3-D correlation function (binning in r-mu).
   For each pair of objects their relative separation vector (x_r)
   and their center of mass (x_CM) are calculated. Then the relative
   separation and deviation w.r.t. the longitudinal direction are
             r  = |x_r|
             mu = |x_r.x_CM|/(|x_CM| |x_r|)
   Pairs are binned in a two-dimensional histogram by these
   quantities.

 * "Full" correlation function.
   Pairs of galaxies are binned according to their angular separation (theta),
   their radial separation (Dz) and mean redshift (z_mean:=(z1+z2)/2).


7 Nearest-neighbour searching

Usually the range of scales of interest, in the case of the three-
dimensional or angular correlation functions, is considerably smaller
than the size of the catalog. Thus, a good way to speed up the
calculation is to avoid, in as much as possible, correlating pairs
of objects beyond the maximum scale. To do this one must find a way
to collect all particles within a given distance of another one without
actually having to calculate the distances between all pairs.

The strategies used by CUTE for this purpose for the 3D and angular 2PCFs
are very similar, so we will describe the three-dimensional case first.
A box encompassing the whole catalog is first determined and divided into
cubical cells. To each cell we associate the positions of all the objects
that fall inside it. Assuming that the maximum distance we are interested
in is Rmax and the cell size a_cell, we draw a cube of
                      2*(int)(Rmax/a_cell)+1
cells around every cell Ci, and we correlate all the objects in Ci with
all the others inside this cube. Of course, the objects close to the corners
of the cube will be beyond Rmax, however this is a small price to pay for 
a fast method to calculate the nearest neighbours.

In the case of the angular correlation function, we can define similar
"cubes" in spherical coordinates of size > theta_max. The sides of these
cubes for a point at (theta,phi) are:
   D(cos(theta)) = cos(theta - theta_max) - cos(theta + theta_max)
   D(phi) = 2 * sqrt(cos^2(theta_max) - cos^2(theta)) / sin(theta)
These regions can be used to find nearest neighbours in a way similar to
the one described above, this time using angular pixels.


8 Pixelization

Angular pixels are used by CUTE to calculate the radial and angular
correlation functions. CUTE creates its own pixels by dividing the
sphere in "squares" in spherical coordinates, i.e.: equal intervals
in cos(theta) and phi. The size of these pixels is determined by the
variable n_pix_sph. The sphere is divided into n_pix_sph bins in
cos(theta) and 2 x n_pix_sph bins in phi. For instance,
n_pix_sph=2048 yields pixels with an angular resolution of 0.07 deg.


9 The CUDA implementation.

The current version of CUTE comes with a GPU version (CU_CUTE)
written in CUDA-C. There exist several differences with respect to the
OpenMP version both in compilation and usage. We enumerate them here:

- The radial correlation function and "full" correlation function are
  not supported in CU_CUTE.
- CU_CUTE only computes auto-correlations (i.e. it cannot cross-correlate
  two datasets).
- In order to use CU_CUTE we must (obviously) have a CUDA-enabled
  device in our system. The current implementation assumes compute 
  capability 2.0 or higher for this device (atomic operations must be
  possible both in global and shared memory). Furthermore, the NVIDIA
  compiler driver NVCC must be installed.
- The CUDA libraries are assumed to be in /usr/local/cuda. If this is
  not the case, change the variable CUDADIR in the Makefile accordingly.
- CUDA kernels are launched with a number of thread blocks given by
  the variable n_blocks, which is taken as a command-line option (see below).
  The optimal value for this number is both data and hardware dependent, so
  some degree of trial-and-error may be necessary to find the best choice.
  For example, for an NVIDIA Tesla C2070 GPU and a catalog with 300K objects
  ~128 blocks seem to be optimal.
- For performance reasons the default compilation options for CU_CUTE
  include less precise divisions and square roots. If a good numerical
  precision is required on the GPU this can be disabled by commenting out
  the variable OPT_PRECISION in the Makefile.
- IMPORTANT: The number of histogram bins, which could be changed in CUTE
  through the parameters (dim*_nbin) is now hard coded (since it defines
  the number of threads per block in GPU kernel launches) to 256. This
  shouldn't be a problem, since you can get the result for smaller values
  by re-binning these. Two options are given for 2D histograms: 128x128
  and 64x64 bins, which must be likewise selected through the
  compile-time option NB_H2D. If so desired, these values can be changed
  by modifying the header file define.h in the folder ./src/. This may
  however affect performance or even prevent the code from working.
- The maximum scale (either angular or radial) for the 2PCF, which is
  set through the parameters dim*_max for CUTE, must now be defined at
  compile-time. For this, the use must edit the Makefile variables 
  R_MAX, THETA_MAX, RL_MAX, RT_MAX and R3D_MAX accordingly.
- The size of the object catalog must be large enough to fit inside the
  device's global memory.

Once the input files are provided and the compile-time options set,
compilation should be straightforward by just typing

  $ make CU_CUTE

This will generate the executable CU_CUTE which can then be run by
typing

  $ ./CU_CUTE <options file> <number of CUDA blocks>


10 Test suite

The current release (>0.2) comes with a folder called "test" containing
a set of files. These are:
 - shell.dat  : a test catalog extracted from a log-normal realization
                of a Planck-like cosmology with 0.45<z<0.75, 0<RA<90,
		and 0<DEC<90.
 - random.dat : a corresponding random catalog
 - param.ini  : an instance of the parameter file needed to run
                CUTE on the test catalog
This test suite is meant to clarify the expected format of the different
input and output files and also as a check that CUTE is running smoothly.
The parameter file is set up so that CUTE can be run on the test catalog
from the root file by just typing:

  $ ./CUTE test/param.txt

or

  $ ./CU_CUTE test/param.txt n_blocks

(n_blocks=256 should work well on a catalog of this size)


11 License.

CUTE and CU_CUTE are distributed under the GPL license (see COPYING in
the root directory). We kindly ask you to cite the program's website 
http://members.ift.uam-csic.es/dmonge/CUTE.html and accompanying
preprint arXiv:1210.1833 when using it for published results.


12 Contact.

Regarding bugs, suggestions, questions or petitions, feel free to contact
the author:
    David Alonso: david dot alonso at astro dot ox dot ac dot uk
