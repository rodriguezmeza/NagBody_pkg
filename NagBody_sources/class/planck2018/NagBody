# NagBody install file - planck2018 code
# Copyright (c) 2006-2022  Mario A. Rodriguez-Meza, Ciudad de Mexico.

CODE_NAME = planck2018
PARENT_CODE_NAME = class

INSTALL_PATH = ../../../..


# FIX the relative installation with NAGBODYDIR
# configure: error: expected an absolute directory name for --prefix: ../../../../local/openmpi
# Then unpack or clone NagBody where ever you want and make a link to it from $HOME
# ln -s path-to-NagBody_pkg $HOME/NagBody_pkg
# ==================================================================
# NOTE: INSTALATION MUST BE RELATIVE TO $(INSTALL_PATH)
# 	Not absolute as is given by $(HOME)/NagBody_pkg
# 	It is better to use a relative path
#NAGBODYDIR = ../../../$(INSTALL_PATH)
NAGBODYDIR = $(HOME)/NagBody_pkg
#

# ==================================================================
# Install $(CODE_NAME) binary

install_all: install install_man

install:
	@echo " "
	@echo "Creating $(CODE_NAME) binaries..."
	(cd src/code/plc_3.0/plc-3.01; \
	./waf --cfitsio_include=$(NAGBODYDIR)/local/cfitsio/include --cfitsio_lib=$(NAGBODYDIR)/local/cfitsio/lib configure; \
	./waf install; cp bin/* ../../../$(INSTALL_PATH)/bin/.)

# Using make:
#	(cd src/code/plc_3.0/plc-3.01; make; make install; make install_python; cp bin/* ../../../$(INSTALL_PATH)/bin/.)

# ==================================================================
# Install $(CODE_NAME) man page

install_man:
	@echo " "
	@echo "Copying $(CODE_NAME) man page..."
	(cd doc; cp $(CODE_NAME).1 $(INSTALL_PATH)/man/man1/$(CODE_NAME).1)

# ==================================================================
# Clean up $(CODE_NAME) source directory

clean:
	@echo " "
	@echo "Cleaning $(CODE_NAME) source dir, binaries and man page files..."
	(cd src/code/plc_3.0/plc-3.01; ./waf uninstall; ./waf clean; ./waf distclean; $(MAKE) clean; \
	rm -f ../../../$(INSTALL_PATH)/bin/clik* \
	rm -f ../../../$(INSTALL_PATH)/bin/prepare_wmap \
	rm -f ../../../$(INSTALL_PATH)/man/man1/$(CODE_NAME).1)

# Using only make:
#	(cd src/code/plc_3.0/plc-3.01; $(MAKE) clean; \

# ==================================================================
# Archive all source directories.  
#
# If errors about missing files occur, 
# use `make -f NagBody packing_sources SHELL=/bin/csh'

#####################################
#####################################
# PACKING (TAR)
#
PACK_PARENT_DIR = ../../../../
PACK_CODE_NAGBODY_ROOT_DIR = NagBody_pkg
PACK_CODE_DIR = $(PACK_CODE_NAGBODY_ROOT_DIR)/NagBody_sources/$(PARENT_CODE_NAME)/$(CODE_NAME)
PACK_ZIP_DIR = $(PACK_CODE_NAGBODY_ROOT_DIR)/zip

#####################################
packing_sources:
	@echo " "
	@echo "Packing $(CODE_NAME) sources..."
	@echo " "
	(cd $(PACK_PARENT_DIR); tar cvf $(PACK_ZIP_DIR)/$(CODE_NAME).tar \
		$(PACK_CODE_DIR)/doc \
		$(PACK_CODE_DIR)/NagBody \
		$(PACK_CODE_DIR)/Readme.txt \
		$(PACK_CODE_DIR)/src/ \
		$(PACK_CODE_DIR)/tests \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/doc \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/env_config/nagbodyrc.sh \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/INSTALL \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/LICENSE \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/make_all \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/NagBody \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/README.md \
		$(PACK_CODE_NAGBODY_ROOT_DIR)/tests; \
	 gzip $(PACK_ZIP_DIR)/$(CODE_NAME).tar )

#####################################
#####################################
# PACKING (TAR) (INDEPENDENT of NagBody)
#
PACK_NAGBODY_DIR = ../..
PACK_ZIP_NO_NAGBODY_DIR = $(PACK_NAGBODY_DIR)/zip

#####################################
packing_sources_no_nagbody:
	@echo " "
	@echo "Packing $(CODE_NAME) sources no NagBody..."
	@echo " "
	(cd ../; tar cvf $(PACK_ZIP_NO_NAGBODY_DIR)/$(CODE_NAME).tar \
		$(CODE_NAME)/doc \
		$(CODE_NAME)/Readme.txt \
		$(CODE_NAME)/src/ \
		$(CODE_NAME)/tests; \
	 gzip $(PACK_ZIP_NO_NAGBODY_DIR)/$(CODE_NAME).tar )

