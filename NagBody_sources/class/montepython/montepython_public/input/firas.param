#------Experiments to test (separated with commas)-----
data.experiments=['firas']

#------ Settings for the over-sampling.
data.over_sampling=[1, 10]

#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'

# Cosmological parameters list
data.parameters['n_s']               = [  0.9665,  None, None,   0.0038,  1,    'cosmo']
data.parameters['A_s']               = [2.105e-9,  None, None,  3.0e-11,  1,    'cosmo']

# Nuisance parameters list
data.parameters['sd_delta_T']        = [     0.0,  None, None,     1e-6,  1, 'nuisance']
data.parameters['sd_T_D']            = [     21.,  None, None,      1.0,  1, 'nuisance']
data.parameters['sd_beta_D']         = [    1.53,  None, None,    0.025,  1, 'nuisance']
data.parameters['sd_A_D']            = [  1.49e6,    0., None,      1e3,  1, 'nuisance']
data.parameters['sd_T_CIB']          = [    18.8,  None, None,      0.6,  1, 'nuisance']
data.parameters['sd_beta_CIB']       = [    0.86,  None, None,     0.06,  1, 'nuisance']
data.parameters['sd_A_CIB']          = [  4.10e5,    0., None,      5e3,  1, 'nuisance']
data.parameters['sd_alpha_sync']     = [    0.82,  None, None,    0.041,  1, 'nuisance']
data.parameters['sd_omega_sync']     = [     0.2,  None, None,     50.0,  1, 'nuisance']
data.parameters['sd_A_sync']         = [    288.,    0., None,     50.0,  1, 'nuisance']
data.parameters['sd_T_e']            = [   7000.,  None, None,    250.0,  1, 'nuisance']
data.parameters['sd_EM']             = [     15.,  None, None,     17.5,  1, 'nuisance']
data.parameters['sd_nu_p_spin']      = [     19.,  None, None,      0.5,  1, 'nuisance']
data.parameters['sd_A_spin']         = [ 1485.33,    0., None,      1e6,  1, 'nuisance']
data.parameters['sd_A_CO']           = [      1.,    0., None,      0.5,  1, 'nuisance']

# Only activate if you want to marginalize over y_reio * Y(x) instead of using CLASS to do it for you using the SZ equations
data.parameters['sd_y_reio_nuisance']= [ 1.77e-6,  None, None,     1e-6,  1, 'nuisance']
# Only activate for tests!
#data.parameters['sd_mu_nuisance']    = [     0.0,  None, None,       0.,  1, 'nuisance']

# Derived parameter list
data.parameters['y_sd']              = [       0,  None, None,        0,  1,  'derived']
data.parameters['mu_sd']             = [       0,  None, None,        0,  1,  'derived']

# Current values are from  Planck 2015 (1502.01589 table 4 penultimate column, except for tau_reio, which was taken from 1605.02985 table 8) (reproduces the fiducial used in 1910.04619)
data.cosmo_arguments['omega_b'] = 0.02226
data.cosmo_arguments['omega_cdm'] = 0.1193
data.cosmo_arguments['h'] = 0.6751
data.cosmo_arguments['tau_reio'] = 0.0596

# Note that the "tCl" argument is needed due to a small bug in CLASS, which will be fixed soon
data.cosmo_arguments['output'] = 'tCl, sd'
data.cosmo_arguments['sd_branching_approx'] = 'exact'
data.cosmo_arguments['sd_PCA_size'] = 2
data.cosmo_arguments['Pk_ini_type'] = 'analytic_Pk'
data.cosmo_arguments['k_pivot'] = 0.05

#------ Mcmc parameters ----
# Number of steps taken, by default (overwritten by the -N command)
data.N=10
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step=5
